// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  displayName String
  username    String    @unique
  password    String
  profilePic  String?

  posts       Post[]    @relation("UserPosts")
  comments    Comment[]
  likes       Like[]

  // Self-relation for follow
  following   Follow[]  @relation("Following")
  followers   Follow[]  @relation("Followers")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id            String     @id @default(uuid())
  content       String

  author        User       @relation("UserPosts", fields: [authorId], references: [id])
  authorId      String

  comments      Comment[]
  likes         Like[]

  likeCount     Int        @default(0)
  commentCount  Int        @default(0)

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String

  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String

  createdAt DateTime @default(now())
}

model Like {
  id       String   @id @default(uuid())

  post     Post     @relation(fields: [postId], references: [id])
  postId   String

  user     User     @relation(fields: [userId], references: [id])
  userId   String

  createdAt DateTime @default(now())

  @@unique([userId, postId]) // Prevent duplicate likes
}

model Follow {
  id           String   @id @default(uuid())

  follower     User     @relation("Following", fields: [followerId], references: [id])
  followerId   String

  following    User     @relation("Followers", fields: [followingId], references: [id])
  followingId  String

  @@unique([followerId, followingId]) // Prevent duplicate follows
}
